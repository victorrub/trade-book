version: "3.7"

services:
  api:
    image: victorrub/tradebook
    ports:
      - "80:80"
    deploy:
      mode: replicated
      replicas: 3
      resources:
        limits:
          cpus: "0.25"
          memory: 250M
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
        failure_action: continue
        monitor: 60s
        order: stop-first
      restart_policy:
        condition: on-failure
    networks:
      - backend-network
    depends_on:
      - mongo
      - redis

  mongo:
    image: mongo
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: #secretPassword
    ports:
      - "27017"
    volumes:
      - db_data:/data/db
    deploy:
      replicas: 1
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
        failure_action: continue
        monitor: 60s
        order: stop-first
      restart_policy:
        condition: on-failure
        delay: 10s
      placement:
        constraints:
          - "node.role==manager"
    networks:
      - backend-network

  mongo-express:
    image: mongo-express
    ports:
      - 8081:8081
    environment:
      ME_CONFIG_BASICAUTH_USERNAME: #username
      ME_CONFIG_BASICAUTH_PASSWORD: #secretPassword
      ME_CONFIG_MONGODB_PORT: 27017
      ME_CONFIG_MONGODB_ADMINUSERNAME: root
      ME_CONFIG_MONGODB_ADMINPASSWORD: #secretPassword
    links:
      - mongo
    networks:
      - backend-network
    depends_on:
      - mongo

  redis:
    image: redis:alpine
    command: redis-server --requirepass #secretPassword
    ports:
      - "6379"
    deploy:
      replicas: 2
      update_config:
        parallelism: 1
        delay: 10s
        order: start-first
      rollback_config:
        parallelism: 1
        delay: 10s
        failure_action: continue
        monitor: 60s
        order: stop-first
      restart_policy:
        condition: on-failure
    networks:
      - backend-network

  visualizer:
    image: dockersamples/visualizer:stable
    ports:
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock"
    stop_grace_period: 1m30s
    deploy:
      placement:
        constraints:
          - "node.role==manager"
    networks:
      - backend-network

networks:
  backend-network:

volumes:
  db_data:
